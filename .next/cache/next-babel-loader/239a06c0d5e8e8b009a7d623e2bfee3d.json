{"ast":null,"code":"import baseURL from '../../helper/baseURL';\nimport jwt from 'jsonwebtoken';\nimport initDb from '../../helper/initDb';\nimport User from '../../models/User';\nimport bcrypt from 'bcryptjs';\ninitDb();\nexport default (async (req, res) => {\n  console.log(req.body);\n  const {\n    email,\n    password\n  } = req.body;\n\n  try {\n    if (!email || !password) {\n      return res.status(422).json({\n        error: \"Please fill all details\"\n      });\n    }\n\n    const user = await User.findOne({\n      email\n    });\n\n    if (!user) {\n      return res.status(404).json({\n        error: \"Please signup first\"\n      });\n    }\n\n    const doMatch = await bcrypt.compare(password, user.password);\n\n    if (doMatch) {\n      //create a json web token\n      const token = jwt.sign({\n        userid: user._id\n      }, process.env.JWT_SECRET, {\n        expiresIn: \"2 days\"\n      });\n      return res.status(201).json({\n        token: token,\n        user: {\n          email: email,\n          password: password\n        }\n      }); //we are generating a token on the basis of user_id and also a secrete key is also required and that could be any \n      //random string and we can also pas the expiring time of the token\n    } else {\n      //kuki agar hm ne likh diya password incorect then cracker will get the hint that email atleast is correct\n      return res.status(401).json({\n        error: \"password or email don't match\"\n      }); // unauthorised\n    }\n  } catch (e) {\n    console.log(\"exception \" + e);\n  }\n});","map":{"version":3,"sources":["C:/Users/Lenovo/Desktop/ECommerce/mystore/pages/api/Login.js"],"names":["baseURL","jwt","initDb","User","bcrypt","req","res","console","log","body","email","password","status","json","error","user","findOne","doMatch","compare","token","sign","userid","_id","process","env","JWT_SECRET","expiresIn","e"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,sBAApB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACAF,MAAM;AACN,gBAAe,OAAMG,GAAN,EAAUC,GAAV,KAAgB;AAC3BC,EAAAA,OAAO,CAACC,GAAR,CAAYH,GAAG,CAACI,IAAhB;AACA,QAAK;AAACC,IAAAA,KAAD;AAAOC,IAAAA;AAAP,MAAiBN,GAAG,CAACI,IAA1B;;AACA,MAAG;AACH,QAAG,CAACC,KAAD,IAAQ,CAACC,QAAZ,EAAqB;AACjB,aAAOL,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,QAAAA,KAAK,EAAC;AAAP,OAArB,CAAP;AACH;;AACD,UAAMC,IAAI,GAAE,MAAOZ,IAAI,CAACa,OAAL,CAAa;AAACN,MAAAA;AAAD,KAAb,CAAnB;;AACA,QAAG,CAACK,IAAJ,EAAS;AACL,aAAOT,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,QAAAA,KAAK,EAAC;AAAP,OAArB,CAAP;AACH;;AACD,UAAMG,OAAO,GAAE,MAAMb,MAAM,CAACc,OAAP,CAAeP,QAAf,EAAwBI,IAAI,CAACJ,QAA7B,CAArB;;AACA,QAAGM,OAAH,EAAW;AACP;AACF,YAAME,KAAK,GAAElB,GAAG,CAACmB,IAAJ,CAAS;AAACC,QAAAA,MAAM,EAACN,IAAI,CAACO;AAAb,OAAT,EAA2BC,OAAO,CAACC,GAAR,CAAYC,UAAvC,EAAkD;AAC3DC,QAAAA,SAAS,EAAC;AADiD,OAAlD,CAAb;AAGA,aAAQpB,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACM,QAAAA,KAAK,EAACA,KAAP;AAAaJ,QAAAA,IAAI,EAAC;AAC3CL,UAAAA,KAAK,EAACA,KADqC;AAE3CC,UAAAA,QAAQ,EAACA;AAFkC;AAAlB,OAArB,CAAR,CALS,CASP;AACA;AACH,KAXD,MAYI;AACA;AACD,aAAOL,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,QAAAA,KAAK,EAAC;AAAP,OAArB,CAAP,CAFC,CAIA;AACH;AACJ,GA3BG,CA4BJ,OAAMa,CAAN,EAAQ;AACJpB,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAamB,CAAzB;AACH;AACA,CAlCD","sourcesContent":["import baseURL from '../../helper/baseURL'\r\nimport jwt from 'jsonwebtoken'\r\nimport initDb from '../../helper/initDb'\r\nimport User from '../../models/User'\r\nimport bcrypt from 'bcryptjs'\r\ninitDb();\r\nexport default async(req,res)=>{\r\n    console.log(req.body);\r\n    const{email,password}=req.body;\r\n    try{\r\n    if(!email||!password){\r\n        return res.status(422).json({error:\"Please fill all details\"})\r\n    }\r\n    const user= await  User.findOne({email});\r\n    if(!user){\r\n        return res.status(404).json({error:\"Please signup first\"})\r\n    }\r\n    const doMatch= await bcrypt.compare(password,user.password);\r\n    if(doMatch){\r\n        //create a json web token\r\n      const token= jwt.sign({userid:user._id},process.env.JWT_SECRET,{\r\n          expiresIn:\"2 days\"  \r\n        });\r\n      return  res.status(201).json({token:token,user:{\r\n          email:email,\r\n          password:password\r\n      }});\r\n        //we are generating a token on the basis of user_id and also a secrete key is also required and that could be any \r\n        //random string and we can also pas the expiring time of the token\r\n    }\r\n    else{\r\n        //kuki agar hm ne likh diya password incorect then cracker will get the hint that email atleast is correct\r\n       return res.status(401).json({error:\"password or email don't match\"})\r\n        \r\n        // unauthorised\r\n    }\r\n}\r\ncatch(e){\r\n    console.log(\"exception \"+e);\r\n}\r\n}"]},"metadata":{},"sourceType":"module"}