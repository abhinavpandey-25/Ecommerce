{"ast":null,"code":"import jwt from 'jsonwebtoken';\nimport Cart from '../../models/Cart';\nexport default (async (req, res) => {\n  const {\n    authorization\n  } = req.headers;\n  console.log(\"authorisation\", authorization);\n\n  if (!authorization) {\n    //401 means unauthorised\n    return res.status(401).json({\n      error: \"login please\"\n    });\n  }\n\n  try {\n    const {\n      userid\n    } = jwt.verify(authorization, process.env.JWT_SECRET);\n    const cart = await Cart.findOne({\n      user: userid\n    });\n    res.status(200).json(cart.products);\n  } catch (error) {\n    return res.status(401).json({\n      error: \"login please\"\n    });\n  }\n});","map":{"version":3,"sources":["C:/Users/Lenovo/Desktop/ECommerce/mystore/pages/api/cart.js"],"names":["jwt","Cart","req","res","authorization","headers","console","log","status","json","error","userid","verify","process","env","JWT_SECRET","cart","findOne","user","products"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,cAAhB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,gBAAe,OAAMC,GAAN,EAAUC,GAAV,KAAgB;AAC3B,QAAK;AAACC,IAAAA;AAAD,MAAgBF,GAAG,CAACG,OAAzB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA4BH,aAA5B;;AACA,MAAG,CAACA,aAAJ,EAAkB;AAClB;AACG,WAAQD,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,MAAAA,KAAK,EAAC;AAAP,KAArB,CAAR;AACF;;AACD,MAAI;AACA,UAAM;AAACC,MAAAA;AAAD,QAASX,GAAG,CAACY,MAAJ,CAAWR,aAAX,EAAyBS,OAAO,CAACC,GAAR,CAAYC,UAArC,CAAf;AACA,UAAMC,IAAI,GAAC,MAAMf,IAAI,CAACgB,OAAL,CAAa;AAACC,MAAAA,IAAI,EAACP;AAAN,KAAb,CAAjB;AACAR,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBO,IAAI,CAACG,QAA1B;AACH,GAJD,CAIE,OAAOT,KAAP,EAAc;AACZ,WAAQP,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,MAAAA,KAAK,EAAC;AAAP,KAArB,CAAR;AACH;AAGJ,CAhBD","sourcesContent":["import jwt from 'jsonwebtoken'\r\nimport Cart from '../../models/Cart'\r\nexport default async(req,res)=>{\r\n    const{authorization}=req.headers;\r\n    console.log(\"authorisation\",authorization)\r\n    if(!authorization){\r\n    //401 means unauthorised\r\n       return  res.status(401).json({error:\"login please\"})\r\n    }\r\n    try {\r\n        const {userid}=jwt.verify(authorization,process.env.JWT_SECRET);\r\n        const cart=await Cart.findOne({user:userid})\r\n        res.status(200).json(cart.products)\r\n    } catch (error) {\r\n        return  res.status(401).json({error:\"login please\"})\r\n    }\r\n    \r\n\r\n}"]},"metadata":{},"sourceType":"module"}