{"ast":null,"code":"import Stripe from 'stripe';\nimport { v4 as uuidv4 } from 'uuid';\nimport Cart from '../../models/Cart';\nimport jwt from 'jsonwebtoken';\nimport initDb from '../../helpers/initDb';\nimport Order from '../../models/Order';\ninitDb();\nconst stripe = Stripe(process.env.STRIPE_SECRET);\nexport default (async (req, res) => {\n  const {\n    paymentInfo\n  } = req.body;\n  const {\n    authorization\n  } = req.headers;\n\n  if (!authorization) {\n    return res.status(401).json({\n      error: \"you must logged in\"\n    });\n  }\n\n  try {\n    const {\n      userid\n    } = jwt.verify(authorization, process.env.JWT_SECRET);\n    const cart = await Cart.findOne({\n      user: userid\n    }).populate(\"products.product\");\n    let price = 0;\n    cart.products.forEach(items => {\n      price = price + items.quantity * items.product.price;\n    }); //check kki customer pehle payment kar chuka ki a ni\n\n    let newCustomer;\n    const prevCustomer = await stripe.customers.list({\n      email: paymentInfo.email\n    });\n    const ExistingCustomer = prevCustomer.data.length > 0;\n\n    if (!ExistingCustomer) {\n      newCustomer = await stripe.customers.create({\n        email: paymentInfo.email,\n        source: paymentInfo.id\n      });\n    }\n\n    await stripe.charges.create({\n      currency: \"INR\",\n      amount: price * 100,\n      receipt_email: paymentInfo.email,\n      customer: ExistingCustomer ? prevCustomer.data[0].id : newCustomer.id,\n      description: `Your payment succesfull |${paymentInfo.email}`\n    }, {\n      idempotencyKey: uuidv4()\n    });\n    await new Order({\n      user: userid,\n      email: paymentInfo.email,\n      total: price * 100,\n      products: cart.products\n    }).save();\n    await Cart.findOneAndUpdate({\n      _id: cart._id\n    }, {\n      $set: {\n        products: []\n      }\n    });\n    res.status(200).json({\n      message: \"payment was successful\"\n    });\n  } catch (error) {\n    console.log(error);\n    return res.status(401).json({\n      error: \"login please\"\n    });\n  }\n});","map":{"version":3,"sources":["C:/Users/Lenovo/Desktop/ECommerce/mystore/pages/api/payment.js"],"names":["Stripe","v4","uuidv4","Cart","jwt","initDb","Order","stripe","process","env","STRIPE_SECRET","req","res","paymentInfo","body","authorization","headers","status","json","error","userid","verify","JWT_SECRET","cart","findOne","user","populate","price","products","forEach","items","quantity","product","newCustomer","prevCustomer","customers","list","email","ExistingCustomer","data","length","create","source","id","charges","currency","amount","receipt_email","customer","description","idempotencyKey","total","save","findOneAndUpdate","_id","$set","message","console","log"],"mappings":"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","sourcesContent":["import Stripe from 'stripe';\r\nimport {v4 as uuidv4} from 'uuid';\r\nimport Cart from '../../models/Cart'\r\nimport jwt from 'jsonwebtoken'\r\nimport initDb from '../../helpers/initDb'\r\nimport Order from '../../models/Order'\r\ninitDb();\r\nconst stripe=Stripe(process.env.STRIPE_SECRET);\r\nexport default async(req,res)=>{\r\n    const {paymentInfo}=req.body\r\n    const {authorization}=req.headers;\r\n        if(!authorization){\r\n            return res.status(401).json({error:\"you must logged in\"})\r\n        }\r\n       try {\r\n                const {userid}=jwt.verify(authorization,process.env.JWT_SECRET);\r\n                const cart=await Cart.findOne({user:userid}).populate(\"products.product\")\r\n                let price=0;\r\n                cart.products.forEach(items=>{\r\n                    price=price+items.quantity*items.product.price;\r\n                })\r\n                //check kki customer pehle payment kar chuka ki a ni\r\n                let newCustomer;\r\n                const prevCustomer =await stripe.customers.list({email:paymentInfo.email})\r\n                const ExistingCustomer=prevCustomer.data.length>0\r\n                if(!ExistingCustomer){\r\n                    newCustomer=await stripe.customers.create({\r\n                        email:paymentInfo.email,\r\n                        source:paymentInfo.id\r\n                    })\r\n                }\r\n                await stripe.charges.create({\r\n                    currency:\"INR\",\r\n                    amount:price*100,\r\n                    receipt_email:paymentInfo.email,\r\n                    customer:ExistingCustomer?prevCustomer.data[0].id:newCustomer.id,\r\n                    description:`Your payment succesfull |${paymentInfo.email}`\r\n                },{\r\n                    idempotencyKey:uuidv4()\r\n                })\r\n                await new Order({\r\n                    user:userid,\r\n                    email:paymentInfo.email,\r\n                    total:price*100,\r\n                    products:cart.products\r\n                }).save();\r\n                await Cart.findOneAndUpdate({_id:cart._id},\r\n                    {$set:{products:[]}})\r\n                res.status(200).json({message:\"payment was successful\"})\r\n\r\n            }\r\n       catch (error) {\r\n           console.log(error)\r\n                return  res.status(401).json({error:\"login please\"})\r\n            }\r\n    }"]},"metadata":{},"sourceType":"module"}