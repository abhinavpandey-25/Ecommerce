{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\ECommerce\\\\mystore\\\\pages\\\\create.js\";\nimport { useState } from 'react';\nimport baseUrl from '../helper/baseURL';\nimport { parseCookies } from 'nookies';\nimport { useRouter } from 'next/router';\n\nconst create = () => {\n  const router = useRouter(); //this create page should be accesed by onlly the admin as user cannnort add the items in the website\n\n  const {\n    0: name,\n    1: setName\n  } = useState(\"\");\n  const {\n    0: price,\n    1: setPrice\n  } = useState(\"\");\n  const {\n    0: media,\n    1: setMedia\n  } = useState(\"\");\n  const {\n    0: description,\n    1: setDescription\n  } = useState(\"\");\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    console.log(\"submit\");\n    const location = await fileUpload();\n    const res = await fetch(`${baseUrl}/api/products`, {\n      method: \"POST\" //hame header bhi specify krna padega ki frontend se kis type ka data bheja jyga from the frontend\\\n      ,\n      headers: {\n        'Content-Type': 'application/json' //server apne aap isko dekh k toh sari incoming request ko json m parse kr dega\n\n      },\n      //when sending the data to the server the data has to be a string\n      //whne receving data from a wev server the data is always a string then parse the data to become a js obj\n      body: JSON.stringify({\n        name: name,\n        price: price,\n        media: location,\n        //for storing image ham image phele upload krenge on cloudinary and then woh url save krenge and use access krenge\n        description: description\n      })\n    });\n    const res2 = await res.json();\n\n    if (res2.error) {\n      M.toast({\n        html: res2.error,\n        classes: \"red\"\n      });\n    } else {\n      M.toast({\n        html: \"Info saved successfully\",\n        classes: \"green\"\n      });\n    }\n\n    router.push('/');\n  };\n\n  const fileUpload = async () => {\n    const formData = new FormData();\n    formData.append('file', media);\n    formData.append('upload_preset', 'mystore2');\n    formData.append('cloud_name', 'storagearea');\n    const res = await fetch('https://api.cloudinary.com/v1_1/storagearea/image/upload', {\n      method: \"POST\",\n      body: formData\n    });\n    const res2 = await res.json();\n    return res2.url;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"container\",\n    onSubmit: e => handleSubmit(e),\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter Name\",\n      value: name,\n      onChange: e => {\n        // console.log(e.target.value);    \n        setName(() => e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: price,\n      placeholder: \"Enter Price\",\n      onChange: e => {\n        setPrice(() => e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"file-field input-field\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"btn\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"File\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          placeholder: \"Choose\",\n          onChange: e => {\n            setMedia(() => e.target.files[0]);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"responsive-img \",\n        src: media ? URL.createObjectURL(media) : \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: description,\n      placeholder: \"add some description\",\n      className: \"materialize-textarea\",\n      onChange: e => setDescription(() => e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      className: \"waves-effect waves-light btn\",\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"material-icons left\",\n        children: \"send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 68\n      }, this), \"Submit\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}; //ctx me server se jo bhi a rha tha jese ham ne server se token and user in which i passed user role user email and user\n//user password  and ye data server p stringify m tha so we nned to parse the object to json\n\n\nexport async function getServerSideProps(ctx) {\n  const cookie = parseCookies(ctx);\n  const user = cookie.user ? JSON.parse(cookie.user) : \"\";\n\n  if (user.role != \"root\" && user.role != \"admin\") {\n    const {\n      res\n    } = ctx; //the status code for redirect is 302\n\n    res.writeHead(302, {\n      Location: \"/\"\n    });\n    res.end();\n  } //parsecookies sari cookies return krta \n  //status code for redirecting 302\n\n\n  return {\n    props: {}\n  };\n}\nexport default create;","map":{"version":3,"sources":["C:/Users/Lenovo/Desktop/ECommerce/mystore/pages/create.js"],"names":["useState","baseUrl","parseCookies","useRouter","create","router","name","setName","price","setPrice","media","setMedia","description","setDescription","handleSubmit","e","preventDefault","console","log","location","fileUpload","res","fetch","method","headers","body","JSON","stringify","res2","json","error","M","toast","html","classes","push","formData","FormData","append","url","target","value","files","URL","createObjectURL","getServerSideProps","ctx","cookie","user","parse","role","writeHead","Location","end","props"],"mappings":"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","sourcesContent":["import {useState} from 'react';\r\nimport baseUrl from '../helper/baseURL'\r\nimport {parseCookies} from 'nookies'\r\nimport {useRouter} from 'next/router'\r\nconst create=()=>{\r\n  const router=useRouter()\r\n  //this create page should be accesed by onlly the admin as user cannnort add the items in the website\r\n    const [name,setName]=useState(\"\")\r\n    const [price,setPrice]=useState(\"\")\r\n    const[media,setMedia]=useState(\"\")\r\n    const [description,setDescription]=useState(\"\")\r\n    const handleSubmit=async(e)=>{\r\n    e.preventDefault();\r\n    console.log(\"submit\")\r\n    const location=await fileUpload();\r\n    const res=  await fetch(`${baseUrl}/api/products`,{\r\n        method:\"POST\"\r\n        //hame header bhi specify krna padega ki frontend se kis type ka data bheja jyga from the frontend\\\r\n        ,headers:{\r\n          'Content-Type':'application/json'\r\n          //server apne aap isko dekh k toh sari incoming request ko json m parse kr dega\r\n        },\r\n        //when sending the data to the server the data has to be a string\r\n        //whne receving data from a wev server the data is always a string then parse the data to become a js obj\r\n        body:JSON.stringify({\r\n          name:name,\r\n          price:price,\r\n          media:location,\r\n          //for storing image ham image phele upload krenge on cloudinary and then woh url save krenge and use access krenge\r\n          description:description\r\n        })\r\n      })\r\n    const res2=await res.json();\r\n    if(res2.error){\r\n      M.toast({html: res2.error,classes:\"red\"})\r\n    }    \r\n    else{\r\n      M.toast({html: \"Info saved successfully\",classes:\"green\"})\r\n    }\r\n    router.push('/')\r\n\r\n }\r\n  const fileUpload=async()=>{\r\n    const formData=new FormData();\r\n    formData.append('file',media);\r\n    formData.append('upload_preset','mystore2');\r\n    formData.append('cloud_name','storagearea');\r\n    const res=await fetch('https://api.cloudinary.com/v1_1/storagearea/image/upload',{\r\n      method:\"POST\",\r\n      body:formData\r\n    })\r\n    const res2=await res.json();\r\n    return res2.url\r\n  }\r\n    return(\r\n    <form className=\"container\" onSubmit={(e)=>handleSubmit(e)}>\r\n        <input type=\"text\" placeholder=\"Enter Name\"   value={name} onChange={(e)=>{\r\n           // console.log(e.target.value);    \r\n         setName(()=>e.target.value);\r\n        }}/>\r\n        <input type=\"text\" value={price} placeholder=\"Enter Price\" onChange={(e)=>{\r\n            setPrice(()=>e.target.value)\r\n        }}/>\r\n        <div className=\"file-field input-field\">\r\n      <div className=\"btn\">\r\n        <span>File</span>\r\n        <input type=\"file\" placeholder=\"Choose\" onChange={(e)=>{setMedia(()=>e.target.files[0])}}/>\r\n      </div>\r\n      <img className=\"responsive-img \"  src={media?URL.createObjectURL(media):\"\"}/>\r\n\r\n    </div>\r\n    {/* to get the image after upload */}\r\n    <textarea  value={description} placeholder={\"add some description\"} className=\"materialize-textarea\" onChange={(e)=>setDescription(()=>e.target.value)}></textarea>\r\n    <button type=\"submit\" className=\"waves-effect waves-light btn\"><i className=\"material-icons left\">send</i>Submit</button>\r\n    </form>\r\n    )\r\n}\r\n\r\n//ctx me server se jo bhi a rha tha jese ham ne server se token and user in which i passed user role user email and user\r\n//user password  and ye data server p stringify m tha so we nned to parse the object to json\r\nexport async function getServerSideProps(ctx){\r\n      const cookie=parseCookies(ctx);\r\n      const user=cookie.user?JSON.parse(cookie.user):\"\";\r\n      if(user.role!=\"root\"&&user.role!=\"admin\"){\r\n          const {res}=ctx;\r\n          //the status code for redirect is 302\r\n          res.writeHead(302,{Location:\"/\"});\r\n          res.end(); \r\n      }\r\n\r\n      //parsecookies sari cookies return krta \r\n      //status code for redirecting 302\r\n  \r\n  return{\r\n      props:{}\r\n  }\r\n\r\n}\r\nexport default create;"]},"metadata":{},"sourceType":"module"}