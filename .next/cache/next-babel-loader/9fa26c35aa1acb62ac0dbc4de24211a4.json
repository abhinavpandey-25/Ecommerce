{"ast":null,"code":"import baseURL from '../../helper/baseURL';\nimport jwt from 'jsonwebtoken';\nimport initDb from '../../helper/initDb';\nimport User from '../../models/User';\nimport bcrypt from 'bcryptjs';\ninitDb();\nexport default (async (req, res) => {\n  console.log(req.body);\n  const {\n    email,\n    password\n  } = req.body;\n\n  try {\n    if (!email || !password) {\n      return res.status(422).json({\n        error: \"Please fill all details\"\n      });\n    }\n\n    const user = await User.findOne({\n      email\n    });\n\n    if (!user) {\n      return res.status(404).json({\n        error: \"Please signup first\"\n      });\n    }\n\n    const doMatch = await bcrypt.compare(password, user.password);\n\n    if (doMatch) {\n      //create a json web token\n      const token = jwt.sign({\n        userid: user._id\n      }, process.env.JWT_SECRET, {\n        expiresIn: \"2 days\"\n      });\n      return res.status(201).json({\n        token: token,\n        user: {\n          email: email,\n          password: password,\n          role: user.role\n        }\n      }); //we are generating a token on the basis of user_id and also a secrete key is also required and that could be any \n      //random string and we can also pas the expiring time of the token\n    } else {\n      //kuki agar hm ne likh diya password incorect then cracker will get the hint that email atleast is correct\n      return res.status(401).json({\n        error: \"password or email don't match\"\n      }); // unauthorised\n    }\n  } catch (e) {\n    console.log(\"exception \" + e);\n  }\n});","map":null,"metadata":{},"sourceType":"module"}