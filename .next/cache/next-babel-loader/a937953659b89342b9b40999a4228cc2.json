{"ast":null,"code":"import jwt from 'jsonwebtoken';\nimport Cart from '../../models/Cart';\nimport Authenticated from '../../helper/Authenticated';\nimport initDb from '../../helper/initDb';\ninitDb();\nexport default (async (req, res) => {\n  switch (req.method) {\n    case \"GET\":\n      await fetchUserCart(req, res);\n      break;\n\n    case \"PUT\":\n      await addProduct(req, res);\n      break;\n\n    case \"DELETE\":\n      await DeleteProduct(req, res);\n      break;\n  }\n});\nconst DeleteProduct = Authenticated(async (req, res) => {\n  const id = req.body.productId;\n  const cart = await Cart.findOneAndUpdate({\n    user: req.userid\n  }, {\n    $pull: {\n      products: {\n        product: id\n      }\n    }\n  }, {\n    new: true\n  }).populate(\"products.product\");\n  res.status(200).json(cart.products);\n});\nconst fetchUserCart = Authenticated(async (req, res) => {\n  const cart = await Cart.findOne({\n    user: req.userid\n  }).populate(\"products.product\");\n  res.status(200).json(cart.products);\n});\nconst addProduct = Authenticated(async (req, res) => {\n  const {\n    quantity,\n    productId\n  } = req.body;\n  const cart = await Cart.findOne({\n    user: req.userid\n  });\n  const pExist = cart.products.some(pdoc => productId === pdoc.product.toString());\n\n  if (pExist) {\n    await Cart.findOneAndUpdate({\n      _id: cart._id,\n      \"products.product\": productId\n    }, {\n      $inc: {\n        \"products.$.quantity\": quantity\n      }\n    });\n  } else {\n    const newProduct = {\n      quantity: quantity,\n      product: productId\n    };\n    await Cart.findOneAndUpdate({\n      _id: cart._id\n    }, {\n      $push: {\n        products: newProduct\n      }\n    });\n  }\n\n  res.status(200).json({\n    message: \"product added to cart\"\n  });\n});","map":{"version":3,"sources":["C:/Users/Lenovo/Desktop/ECommerce/mystore/pages/api/cart.js"],"names":["jwt","Cart","Authenticated","initDb","req","res","method","fetchUserCart","addProduct","DeleteProduct","id","body","productId","cart","findOneAndUpdate","user","userid","$pull","products","product","new","populate","status","json","findOne","quantity","pExist","some","pdoc","toString","_id","$inc","newProduct","$push","message"],"mappings":"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","sourcesContent":["import jwt from 'jsonwebtoken'\r\nimport Cart from '../../models/Cart'\r\nimport Authenticated from '../../helper/Authenticated'\r\nimport initDb from '../../helper/initDb'\r\ninitDb()\r\nexport default async(req,res)=>{\r\n    switch(req.method){\r\n        case \"GET\":\r\n            await fetchUserCart(req,res)\r\n            break\r\n        case \"PUT\":\r\n            await addProduct(req,res)\r\n            break \r\n        case \"DELETE\":\r\n            await DeleteProduct(req,res)\r\n            break\r\n    }\r\n}\r\n    const DeleteProduct=Authenticated(async(req,res)=>{\r\n        const id=req.body.productId;\r\n        const cart=await Cart.findOneAndUpdate(\r\n            {user:req.userid},\r\n            {$pull:{products:{product:id}}},\r\n            {new:true}   \r\n        ).populate(\"products.product\")\r\n        res.status(200).json(cart.products)\r\n\r\n    })\r\n    const fetchUserCart=Authenticated(async(req,res)=>{\r\n       \r\n            const cart=await Cart.findOne({user:req.userid}).populate(\"products.product\")\r\n            res.status(200).json(cart.products)\r\n    })\r\n    \r\n    const addProduct=Authenticated(async(req,res)=>{\r\n        const {quantity,productId}=req.body\r\n        const cart=await Cart.findOne({user:req.userid})\r\n        const pExist=cart.products.some(pdoc=>productId===pdoc.product.toString())\r\n        if(pExist){\r\n            await Cart.findOneAndUpdate({_id:cart._id,\"products.product\":productId},{$inc:{\"products.$.quantity\":quantity}})\r\n        }\r\n        else{\r\n            const newProduct={quantity:quantity,product:productId}\r\n        await Cart.findOneAndUpdate({_id:cart._id},\r\n            {$push:{products:newProduct}})\r\n        }\r\n        res.status(200).json({message:\"product added to cart\"})\r\n    } )\r\n\r\n"]},"metadata":{},"sourceType":"module"}