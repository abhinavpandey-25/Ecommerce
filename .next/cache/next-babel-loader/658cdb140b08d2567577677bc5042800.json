{"ast":null,"code":"import jwt from 'jsonwebtoken';\nimport Cart from '../../models/Cart';\nexport default (async (req, res) => {\n  switch (req.method) {\n    case \"GET\":\n      await fetchUserCart(req, res);\n      break;\n\n    case \"PUT\":\n      await addProduct(req, res);\n      break;\n\n    case \"DELETE\":\n      await DeleteProduct(req, res);\n      break;\n  }\n});\n\nfunction Authenticated(icomponent) {\n  return (req, res) => {\n    const {\n      authorization\n    } = req.headers;\n\n    if (!authorization) {\n      return res.status(401).json({\n        error: \"you must logged in\"\n      });\n    }\n\n    try {\n      const {\n        userid\n      } = jwt.verify(authorization, process.env.JWT_SECRET);\n      console.log(userid);\n      req.userid = userid;\n      return icomponent(req, res);\n    } catch (error) {\n      return res.status(401).json({\n        error: \"login please\"\n      });\n    }\n  };\n}\n\nconst DeleteProduct = Authenticated(async (req, res) => {\n  const id = req.body.productId;\n  const cart = await Cart.findOneAndUpdate({\n    user: req.userid\n  }, {\n    $pull: {\n      products: {\n        product: id\n      }\n    }\n  }, {\n    new: true\n  }).populate(\"products.product\");\n  res.status(200).json(cart.products);\n});\nconst fetchUserCart = Authenticated(async (req, res) => {\n  const cart = await Cart.findOne({\n    user: req.userid\n  }).populate(\"products.product\");\n  res.status(200).json(cart.products);\n});\nconst addProduct = Authenticated(async (req, res) => {\n  const {\n    quantity,\n    productId\n  } = req.body;\n  const cart = await Cart.findOne({\n    user: req.userid\n  });\n  const pExist = cart.products.some(pdoc => productId === pdoc.product.toString());\n\n  if (pExist) {\n    await Cart.findOneAndUpdate({\n      _id: cart._id,\n      \"products.product\": productId\n    }, {\n      $inc: {\n        \"products.$.quantity\": quantity\n      }\n    });\n  } else {\n    const newProduct = {\n      quantity: quantity,\n      product: productId\n    };\n    await Cart.findOneAndUpdate({\n      _id: cart._id\n    }, {\n      $push: {\n        products: newProduct\n      }\n    });\n  }\n\n  res.status(200).json({\n    message: \"product added to cart\"\n  });\n});","map":{"version":3,"sources":["C:/Users/Lenovo/Desktop/ECommerce/mystore/pages/api/cart.js"],"names":["jwt","Cart","req","res","method","fetchUserCart","addProduct","DeleteProduct","Authenticated","icomponent","authorization","headers","status","json","error","userid","verify","process","env","JWT_SECRET","console","log","id","body","productId","cart","findOneAndUpdate","user","$pull","products","product","new","populate","findOne","quantity","pExist","some","pdoc","toString","_id","$inc","newProduct","$push","message"],"mappings":"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","sourcesContent":["import jwt from 'jsonwebtoken'\r\nimport Cart from '../../models/Cart'\r\nexport default async(req,res)=>{\r\n    switch(req.method){\r\n        case \"GET\":\r\n            await fetchUserCart(req,res)\r\n            break\r\n        case \"PUT\":\r\n            await addProduct(req,res)\r\n            break \r\n        case \"DELETE\":\r\n            await DeleteProduct(req,res)\r\n            break\r\n    }\r\n}\r\nfunction Authenticated(icomponent){\r\n     return (req,res)=>{\r\n        const {authorization}=req.headers;\r\n        if(!authorization){\r\n            return res.status(401).json({error:\"you must logged in\"})\r\n        }\r\n       try {\r\n                const {userid}=jwt.verify(authorization,process.env.JWT_SECRET);\r\n                console.log(userid);\r\n                req.userid=userid\r\n                return icomponent(req,res)\r\n           }\r\n       catch (error) {\r\n                return  res.status(401).json({error:\"login please\"})\r\n            }\r\n    }\r\n}\r\n    const DeleteProduct=Authenticated(async(req,res)=>{\r\n        const id=req.body.productId;\r\n        const cart=await Cart.findOneAndUpdate(\r\n            {user:req.userid},\r\n            {$pull:{products:{product:id}}},\r\n            {new:true}   \r\n        ).populate(\"products.product\")\r\n        res.status(200).json(cart.products)\r\n\r\n    })\r\n    const fetchUserCart=Authenticated(async(req,res)=>{\r\n       \r\n            const cart=await Cart.findOne({user:req.userid}).populate(\"products.product\")\r\n            res.status(200).json(cart.products)\r\n    })\r\n    \r\n    const addProduct=Authenticated(async(req,res)=>{\r\n        const {quantity,productId}=req.body\r\n        const cart=await Cart.findOne({user:req.userid})\r\n        const pExist=cart.products.some(pdoc=>productId===pdoc.product.toString())\r\n        if(pExist){\r\n            await Cart.findOneAndUpdate({_id:cart._id,\"products.product\":productId},{$inc:{\"products.$.quantity\":quantity}})\r\n        }\r\n        else{\r\n            const newProduct={quantity:quantity,product:productId}\r\n        await Cart.findOneAndUpdate({_id:cart._id},\r\n            {$push:{products:newProduct}})\r\n        }\r\n        res.status(200).json({message:\"product added to cart\"})\r\n    } )\r\n\r\n"]},"metadata":{},"sourceType":"module"}