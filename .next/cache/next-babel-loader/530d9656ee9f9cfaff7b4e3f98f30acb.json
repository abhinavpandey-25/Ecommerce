{"ast":null,"code":"import jwt from 'jsonwebtoken';\nimport Cart from '../../models/Cart';\nexport default (async (req, res) => {\n  switch (req.method) {\n    case \"GET\":\n      await fetchUserCart(req, res);\n      break;\n\n    case \"PUT\":\n      await addProduct(req, res);\n      break;\n  }\n});\n\nfunction Authenticated(icomponent) {\n  return (req, res) => {\n    const {\n      authorization\n    } = req.headers;\n\n    if (!authorization) {\n      return res.status(401).json({\n        error: \"you must logged in\"\n      });\n    }\n\n    try {\n      const {\n        userid\n      } = jwt.verify(authorization, process.env.JWT_SECRET);\n      console.log(userid);\n      req.userid = userid;\n      return icomponent(req, res);\n    } catch (error) {\n      return res.status(401).json({\n        error: \"login please\"\n      });\n    }\n  };\n}\n\nconst fetchUserCart = Authenticated(async (req, res) => {\n  const cart = await Cart.findOne({\n    user: req.userid\n  });\n  res.status(200).json(cart.products).populate(\"products.product\");\n});\nconst addProduct = Authenticated(async (req, res) => {\n  const {\n    quantity,\n    productId\n  } = req.body;\n  const cart = await Cart.findOne({\n    user: req.userid\n  });\n  const pExist = cart.products.some(pdoc => productId === pdoc.product.toString());\n\n  if (pExist) {\n    await Cart.findOneAndUpdate({\n      _id: cart._id,\n      \"products.product\": productId\n    }, {\n      $inc: {\n        \"products.$.quantity\": quantity\n      }\n    });\n  } else {\n    const newProduct = {\n      quantity: quantity,\n      product: productId\n    };\n    await Cart.findOneAndUpdate({\n      _id: cart._id\n    }, {\n      $push: {\n        products: newProduct\n      }\n    });\n  }\n\n  res.status(200).json({\n    message: \"product added to cart\"\n  });\n});","map":{"version":3,"sources":["C:/Users/Lenovo/Desktop/ECommerce/mystore/pages/api/cart.js"],"names":["jwt","Cart","req","res","method","fetchUserCart","addProduct","Authenticated","icomponent","authorization","headers","status","json","error","userid","verify","process","env","JWT_SECRET","console","log","cart","findOne","user","products","populate","quantity","productId","body","pExist","some","pdoc","product","toString","findOneAndUpdate","_id","$inc","newProduct","$push","message"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,cAAhB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,gBAAe,OAAMC,GAAN,EAAUC,GAAV,KAAgB;AAC3B,UAAOD,GAAG,CAACE,MAAX;AACI,SAAK,KAAL;AACI,YAAMC,aAAa,CAACH,GAAD,EAAKC,GAAL,CAAnB;AACA;;AACJ,SAAK,KAAL;AACI,YAAMG,UAAU,CAACJ,GAAD,EAAKC,GAAL,CAAhB;AACA;AANR;AAQH,CATD;;AAUA,SAASI,aAAT,CAAuBC,UAAvB,EAAkC;AAC7B,SAAO,CAACN,GAAD,EAAKC,GAAL,KAAW;AACf,UAAM;AAACM,MAAAA;AAAD,QAAgBP,GAAG,CAACQ,OAA1B;;AACA,QAAG,CAACD,aAAJ,EAAkB;AACd,aAAON,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,QAAAA,KAAK,EAAC;AAAP,OAArB,CAAP;AACH;;AACF,QAAI;AACK,YAAM;AAACC,QAAAA;AAAD,UAASd,GAAG,CAACe,MAAJ,CAAWN,aAAX,EAAyBO,OAAO,CAACC,GAAR,CAAYC,UAArC,CAAf;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYN,MAAZ;AACAZ,MAAAA,GAAG,CAACY,MAAJ,GAAWA,MAAX;AACA,aAAON,UAAU,CAACN,GAAD,EAAKC,GAAL,CAAjB;AACJ,KALL,CAMA,OAAOU,KAAP,EAAc;AACL,aAAQV,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,QAAAA,KAAK,EAAC;AAAP,OAArB,CAAR;AACH;AACR,GAdA;AAeJ;;AACG,MAAMR,aAAa,GAACE,aAAa,CAAC,OAAML,GAAN,EAAUC,GAAV,KAAgB;AAE1C,QAAMkB,IAAI,GAAC,MAAMpB,IAAI,CAACqB,OAAL,CAAa;AAACC,IAAAA,IAAI,EAACrB,GAAG,CAACY;AAAV,GAAb,CAAjB;AACAX,EAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBS,IAAI,CAACG,QAA1B,EAAoCC,QAApC,CAA6C,kBAA7C;AACP,CAJgC,CAAjC;AAMA,MAAMnB,UAAU,GAACC,aAAa,CAAC,OAAML,GAAN,EAAUC,GAAV,KAAgB;AAC3C,QAAM;AAACuB,IAAAA,QAAD;AAAUC,IAAAA;AAAV,MAAqBzB,GAAG,CAAC0B,IAA/B;AACA,QAAMP,IAAI,GAAC,MAAMpB,IAAI,CAACqB,OAAL,CAAa;AAACC,IAAAA,IAAI,EAACrB,GAAG,CAACY;AAAV,GAAb,CAAjB;AACA,QAAMe,MAAM,GAACR,IAAI,CAACG,QAAL,CAAcM,IAAd,CAAmBC,IAAI,IAAEJ,SAAS,KAAGI,IAAI,CAACC,OAAL,CAAaC,QAAb,EAArC,CAAb;;AACA,MAAGJ,MAAH,EAAU;AACN,UAAM5B,IAAI,CAACiC,gBAAL,CAAsB;AAACC,MAAAA,GAAG,EAACd,IAAI,CAACc,GAAV;AAAc,0BAAmBR;AAAjC,KAAtB,EAAkE;AAACS,MAAAA,IAAI,EAAC;AAAC,+BAAsBV;AAAvB;AAAN,KAAlE,CAAN;AACH,GAFD,MAGI;AACA,UAAMW,UAAU,GAAC;AAACX,MAAAA,QAAQ,EAACA,QAAV;AAAmBM,MAAAA,OAAO,EAACL;AAA3B,KAAjB;AACJ,UAAM1B,IAAI,CAACiC,gBAAL,CAAsB;AAACC,MAAAA,GAAG,EAACd,IAAI,CAACc;AAAV,KAAtB,EACF;AAACG,MAAAA,KAAK,EAAC;AAACd,QAAAA,QAAQ,EAACa;AAAV;AAAP,KADE,CAAN;AAEC;;AACDlC,EAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAC2B,IAAAA,OAAO,EAAC;AAAT,GAArB;AACH,CAb6B,CAA9B","sourcesContent":["import jwt from 'jsonwebtoken'\r\nimport Cart from '../../models/Cart'\r\nexport default async(req,res)=>{\r\n    switch(req.method){\r\n        case \"GET\":\r\n            await fetchUserCart(req,res)\r\n            break\r\n        case \"PUT\":\r\n            await addProduct(req,res)\r\n            break \r\n    }\r\n}\r\nfunction Authenticated(icomponent){\r\n     return (req,res)=>{\r\n        const {authorization}=req.headers;\r\n        if(!authorization){\r\n            return res.status(401).json({error:\"you must logged in\"})\r\n        }\r\n       try {\r\n                const {userid}=jwt.verify(authorization,process.env.JWT_SECRET);\r\n                console.log(userid);\r\n                req.userid=userid\r\n                return icomponent(req,res)\r\n           }\r\n       catch (error) {\r\n                return  res.status(401).json({error:\"login please\"})\r\n            }\r\n    }\r\n}\r\n    const fetchUserCart=Authenticated(async(req,res)=>{\r\n       \r\n            const cart=await Cart.findOne({user:req.userid})\r\n            res.status(200).json(cart.products).populate(\"products.product\")\r\n    })\r\n    \r\n    const addProduct=Authenticated(async(req,res)=>{\r\n        const {quantity,productId}=req.body\r\n        const cart=await Cart.findOne({user:req.userid})\r\n        const pExist=cart.products.some(pdoc=>productId===pdoc.product.toString())\r\n        if(pExist){\r\n            await Cart.findOneAndUpdate({_id:cart._id,\"products.product\":productId},{$inc:{\"products.$.quantity\":quantity}})\r\n        }\r\n        else{\r\n            const newProduct={quantity:quantity,product:productId}\r\n        await Cart.findOneAndUpdate({_id:cart._id},\r\n            {$push:{products:newProduct}})\r\n        }\r\n        res.status(200).json({message:\"product added to cart\"})\r\n    } )\r\n\r\n"]},"metadata":{},"sourceType":"module"}