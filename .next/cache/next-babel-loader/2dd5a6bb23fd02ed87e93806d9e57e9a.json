{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\ECommerce\\\\mystore\\\\pages\\\\product\\\\[id].js\";\nimport { useRouter } from 'next/router';\n\nconst product = props => {\n  const router = useRouter();\n\n  if (router.isFallback) {\n    //agar use static props krte and and fallback true h then agar wo page already build nhi h toh server se fetch\n    //krenge jisme time lgta h toh tb tak ham loading a option dekha sakte h.\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"...Loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 16\n    }, this);\n  } // console.log(props);\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"row\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"card small \",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"card-image\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: props.value.mediaURL\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          class: \"card-title\",\n          children: props.value.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"card-content\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: props.value.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"card-action\",\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"#\",\n          children: \"This is a link\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n}; // export async function getServerSideProps(context) {\n//    //since by using serverside props it can work fine but when the traffic is more it can decrease its performance\n//    //since the page is static one so we can use getstatic props also for better performance.\n//here in getserever side props context contains the params as obj and inside it id as another object {id:...}\n//    const id= context.params.id;\n//    const data=await fetch(`http://localhost:3000/api/product/${id}`).then(res=>res.json());\n//    console.log(data);\n//    return{\n//        props:{\n//            value:data\n//        }\n//    }\n// }       \n\n\nexport async function getStaticProps(context) {\n  //since by using serverside props it can work fine but when the traffic is more it can decrease its performance\n  //since the page is static one so we can use getstatic props also for better performance.\n  const id = context.params.id;\n  const data = await fetch(`http://localhost:3000/api/product/${id}`).then(res => res.json()); //console.log(data);\n\n  return {\n    props: {\n      value: data\n    }\n  };\n} //first getstatic paths will run during build to build the sattic page with the givven id only\n//baki agar fallback false h toh other pages k liye pagenot found ayga but agar fall back true h toh jo id exist nhi krti at\n//build time then network request jese hoga on getstatic props\n\nexport async function getStaticPaths() {\n  const alldata = await fetch('http://localhost:3000/api/product/products').then(res => res.json());\n  console.log(alldata);\n  return {\n    paths: [{\n      params: {\n        id: \"5f977ae61efe90be048d25ae\"\n      }\n    }],\n    fallback: true\n  };\n}\nexport default product;","map":{"version":3,"sources":["C:/Users/Lenovo/Desktop/ECommerce/mystore/pages/product/[id].js"],"names":["useRouter","product","props","router","isFallback","value","mediaURL","name","description","getStaticProps","context","id","params","data","fetch","then","res","json","getStaticPaths","alldata","console","log","paths","fallback"],"mappings":";;AAAA,SAAQA,SAAR,QAAwB,aAAxB;;AACA,MAAMC,OAAO,GAAEC,KAAD,IAAS;AACnB,QAAMC,MAAM,GAACH,SAAS,EAAtB;;AACA,MAAGG,MAAM,CAACC,UAAV,EAAqB;AACjB;AACA;AACA,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GANkB,CAOnB;;;AACJ,sBACI;AAAK,IAAA,KAAK,EAAC,KAAX;AAAA,2BACA;AAAK,MAAA,KAAK,EAAC,aAAX;AAAA,8BACE;AAAK,QAAA,KAAK,EAAC,YAAX;AAAA,gCACE;AAAK,UAAA,GAAG,EAAEF,KAAK,CAACG,KAAN,CAAYC;AAAtB;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAM,UAAA,KAAK,EAAC,YAAZ;AAAA,oBAA0BJ,KAAK,CAACG,KAAN,CAAYE;AAAtC;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAKE;AAAK,QAAA,KAAK,EAAC,cAAX;AAAA,+BACE;AAAA,oBAAIL,KAAK,CAACG,KAAN,CAAYG;AAAhB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cALF,eAQE;AAAK,QAAA,KAAK,EAAC,aAAX;AAAA,+BACE;AAAG,UAAA,IAAI,EAAC,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cARF;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,UADJ;AAgBC,CAxBD,C,CAyBA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC3C;AACA;AACA,QAAMC,EAAE,GAAED,OAAO,CAACE,MAAR,CAAeD,EAAzB;AACA,QAAME,IAAI,GAAC,MAAMC,KAAK,CAAE,qCAAoCH,EAAG,EAAzC,CAAL,CAAiDI,IAAjD,CAAsDC,GAAG,IAAEA,GAAG,CAACC,IAAJ,EAA3D,CAAjB,CAJ2C,CAM3C;;AACA,SAAM;AACFf,IAAAA,KAAK,EAAC;AACFG,MAAAA,KAAK,EAACQ;AADJ;AADJ,GAAN;AAKF,C,CACD;AACA;AACA;;AACA,OAAO,eAAeK,cAAf,GAAgC;AACnC,QAAMC,OAAO,GAAC,MAAML,KAAK,CAAC,4CAAD,CAAL,CAAoDC,IAApD,CAAyDC,GAAG,IAAEA,GAAG,CAACC,IAAJ,EAA9D,CAApB;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACA,SAAO;AACLG,IAAAA,KAAK,EAAE,CACL;AAAEV,MAAAA,MAAM,EAAE;AAAED,QAAAA,EAAE,EAAC;AAAL;AAAV,KADK,CADF;AAILY,IAAAA,QAAQ,EAAE;AAJL,GAAP;AAMD;AACH,eAAetB,OAAf","sourcesContent":["import {useRouter} from 'next/router'\r\nconst product=(props)=>{\r\n    const router=useRouter()\r\n    if(router.isFallback){\r\n        //agar use static props krte and and fallback true h then agar wo page already build nhi h toh server se fetch\r\n        //krenge jisme time lgta h toh tb tak ham loading a option dekha sakte h.\r\n        return(<h1>...Loading</h1>)\r\n    }\r\n    // console.log(props);\r\nreturn(\r\n    <div class=\"row\">\r\n    <div class=\"card small \">\r\n      <div class=\"card-image\">\r\n        <img src={props.value.mediaURL}/>\r\n        <span class=\"card-title\">{props.value.name}</span>\r\n      </div>\r\n      <div class=\"card-content\">\r\n        <p>{props.value.description}</p>\r\n      </div>\r\n      <div class=\"card-action\">\r\n        <a href=\"#\">This is a link</a>\r\n      </div>\r\n    </div>\r\n    </div>\r\n)\r\n}\r\n// export async function getServerSideProps(context) {\r\n//    //since by using serverside props it can work fine but when the traffic is more it can decrease its performance\r\n//    //since the page is static one so we can use getstatic props also for better performance.\r\n//here in getserever side props context contains the params as obj and inside it id as another object {id:...}\r\n//    const id= context.params.id;\r\n//    const data=await fetch(`http://localhost:3000/api/product/${id}`).then(res=>res.json());\r\n\r\n//    console.log(data);\r\n//    return{\r\n//        props:{\r\n//            value:data\r\n//        }\r\n//    }\r\n// }       \r\nexport async function getStaticProps(context) {\r\n   //since by using serverside props it can work fine but when the traffic is more it can decrease its performance\r\n   //since the page is static one so we can use getstatic props also for better performance.\r\n   const id= context.params.id;\r\n   const data=await fetch(`http://localhost:3000/api/product/${id}`).then(res=>res.json());\r\n\r\n   //console.log(data);\r\n   return{\r\n       props:{\r\n           value:data\r\n       }\r\n   }\r\n}       \r\n//first getstatic paths will run during build to build the sattic page with the givven id only\r\n//baki agar fallback false h toh other pages k liye pagenot found ayga but agar fall back true h toh jo id exist nhi krti at\r\n//build time then network request jese hoga on getstatic props\r\nexport async function getStaticPaths() {\r\n    const alldata=await fetch('http://localhost:3000/api/product/products').then(res=>res.json())\r\n    console.log(alldata);\r\n    return {\r\n      paths: [\r\n        { params: { id:\"5f977ae61efe90be048d25ae\"} } \r\n      ],\r\n      fallback: true \r\n    };\r\n  }\r\nexport default product;"]},"metadata":{},"sourceType":"module"}