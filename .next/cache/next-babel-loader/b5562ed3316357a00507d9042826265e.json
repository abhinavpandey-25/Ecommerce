{"ast":null,"code":"import jwt from 'jsonwebtoken';\nimport Cart from '../../models/Cart';\nexport default (async (req, res) => {\n  switch (req.method) {\n    case \"GET\":\n      await fetchUserCart(req, res);\n      break;\n\n    case \"PUT\":\n      await addProduct(req, res);\n      break;\n  }\n});\n\nfunction Authentication(icomponent) {\n  return (req, res) => {\n    const {\n      authorization\n    } = req.headers;\n\n    if (!authorization) {\n      return res.status(401).json({\n        error: \"you must logged in\"\n      });\n    }\n\n    try {\n      const {\n        userid\n      } = jwt.verify(authorization, process.env.JWT_SECRET);\n    } catch (error) {\n      return res.status(401).json({\n        error: \"login please\"\n      });\n    }\n  };\n}\n\nconst fetchUserCart = async (req, res) => {\n  const {\n    authorization\n  } = req.headers;\n\n  if (!authorization) {\n    //401 means unauthorised\n    return res.status(401).json({\n      error: \"login please\"\n    });\n  }\n\n  try {\n    const {\n      userid\n    } = jwt.verify(authorization, process.env.JWT_SECRET);\n    const cart = await Cart.findOne({\n      user: userid\n    });\n    res.status(200).json(cart.products);\n  } catch (error) {\n    return res.status(401).json({\n      error: \"login please\"\n    });\n  }\n};\n\nconst addProduct = (req, res) => {};","map":{"version":3,"sources":["C:/Users/Lenovo/Desktop/ECommerce/mystore/pages/api/cart.js"],"names":["jwt","Cart","req","res","method","fetchUserCart","addProduct","Authentication","icomponent","authorization","headers","status","json","error","userid","verify","process","env","JWT_SECRET","cart","findOne","user","products"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,cAAhB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,gBAAe,OAAMC,GAAN,EAAUC,GAAV,KAAgB;AAC3B,UAAOD,GAAG,CAACE,MAAX;AACI,SAAK,KAAL;AACI,YAAMC,aAAa,CAACH,GAAD,EAAKC,GAAL,CAAnB;AACA;;AACJ,SAAK,KAAL;AACI,YAAMG,UAAU,CAACJ,GAAD,EAAKC,GAAL,CAAhB;AACA;AANR;AAQH,CATD;;AAUA,SAASI,cAAT,CAAwBC,UAAxB,EAAmC;AAC/B,SAAO,CAACN,GAAD,EAAKC,GAAL,KAAW;AACd,UAAM;AAACM,MAAAA;AAAD,QAAgBP,GAAG,CAACQ,OAA1B;;AACA,QAAG,CAACD,aAAJ,EAAkB;AACd,aAAON,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,QAAAA,KAAK,EAAC;AAAP,OAArB,CAAP;AACH;;AACF,QAAI;AACK,YAAM;AAACC,QAAAA;AAAD,UAASd,GAAG,CAACe,MAAJ,CAAWN,aAAX,EAAyBO,OAAO,CAACC,GAAR,CAAYC,UAArC,CAAf;AAEJ,KAHL,CAIA,OAAOL,KAAP,EAAc;AACL,aAAQV,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,QAAAA,KAAK,EAAC;AAAP,OAArB,CAAR;AACH;AACR,GAZD;AAaH;;AACG,MAAMR,aAAa,GAAC,OAAMH,GAAN,EAAUC,GAAV,KAAgB;AAChC,QAAK;AAACM,IAAAA;AAAD,MAAgBP,GAAG,CAACQ,OAAzB;;AACA,MAAG,CAACD,aAAJ,EAAkB;AAClB;AACG,WAAQN,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,MAAAA,KAAK,EAAC;AAAP,KAArB,CAAR;AACF;;AACD,MAAI;AACA,UAAM;AAACC,MAAAA;AAAD,QAASd,GAAG,CAACe,MAAJ,CAAWN,aAAX,EAAyBO,OAAO,CAACC,GAAR,CAAYC,UAArC,CAAf;AACA,UAAMC,IAAI,GAAC,MAAMlB,IAAI,CAACmB,OAAL,CAAa;AAACC,MAAAA,IAAI,EAACP;AAAN,KAAb,CAAjB;AACAX,IAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBO,IAAI,CAACG,QAA1B;AACH,GAJD,CAIE,OAAOT,KAAP,EAAc;AACZ,WAAQV,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,MAAAA,KAAK,EAAC;AAAP,KAArB,CAAR;AACH;AACJ,CAbD;;AAcA,MAAMP,UAAU,GAAC,CAACJ,GAAD,EAAKC,GAAL,KAAW,CAE3B,CAFD","sourcesContent":["import jwt from 'jsonwebtoken'\r\nimport Cart from '../../models/Cart'\r\nexport default async(req,res)=>{\r\n    switch(req.method){\r\n        case \"GET\":\r\n            await fetchUserCart(req,res)\r\n            break\r\n        case \"PUT\":\r\n            await addProduct(req,res)\r\n            break \r\n    }\r\n}\r\nfunction Authentication(icomponent){\r\n    return (req,res)=>{\r\n        const {authorization}=req.headers;\r\n        if(!authorization){\r\n            return res.status(401).json({error:\"you must logged in\"})\r\n        }\r\n       try {\r\n                const {userid}=jwt.verify(authorization,process.env.JWT_SECRET);\r\n              \r\n           }\r\n       catch (error) {\r\n                return  res.status(401).json({error:\"login please\"})\r\n            }\r\n    }\r\n}\r\n    const fetchUserCart=async(req,res)=>{\r\n        const{authorization}=req.headers;\r\n        if(!authorization){\r\n        //401 means unauthorised\r\n           return  res.status(401).json({error:\"login please\"})\r\n        }\r\n        try {\r\n            const {userid}=jwt.verify(authorization,process.env.JWT_SECRET);\r\n            const cart=await Cart.findOne({user:userid})\r\n            res.status(200).json(cart.products)\r\n        } catch (error) {\r\n            return  res.status(401).json({error:\"login please\"})\r\n        }\r\n    }\r\n    const addProduct=(req,res)=>{\r\n    \r\n    }  \r\n\r\n"]},"metadata":{},"sourceType":"module"}